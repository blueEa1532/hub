local function espGUI()
	local Players    = game:GetService("Players")
	local RunService = game:GetService("RunService")
	local Camera     = workspace.CurrentCamera

	-- ESP Config
	local ESP_MIN_DIST,  ESP_MAX_DIST  = 10, 180
	local ESP_MIN_SCALE, ESP_MAX_SCALE = 4.0, 25.0

	-- Info GUI Config
	local INFO_MIN_DIST,  INFO_MAX_DIST  = ESP_MIN_DIST, ESP_MAX_DIST -- Use same distance range as ESP
	local INFO_MIN_SCALE, INFO_MAX_SCALE = 0.7, 0.7
	local INFO_BASE_WIDTH_PIXELS  = 130 -- Base width for the info panel background
	-- Increased height to accommodate 3 new labels (Health, Speed, Velocity, JumpPower, Vulnerable)
	-- Original: 55 for 2 labels. New: Approx 110 for 5 labels.
	local INFO_BASE_HEIGHT_PIXELS = 110
	local INFO_BASE_TEXT_SIZE     = 14  -- Base font size for info text
	local INFO_STUDS_OFFSET_Y_Z   = Vector2.new(0.5, 0) -- Base Y and Z studs offset for Info GUI. X will be dynamic.
	local DESIRED_STUD_GAP        = 2

	-- CREATE FUNCTIONS
	-- 1) ESP GUI
	local function createESPGui()
		local gui = Instance.new("BillboardGui")
		gui.Name        = "RootOfESP"
		gui.Active      = true
		gui.AlwaysOnTop = true
		gui.Size        = UDim2.new(0, 75, 0, 75) -- Initial Size
		gui.StudsOffset = Vector3.new(0, 0, 0) -- ESP GUI is centered on Adornee by default X-axis
		gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

		local inner = Instance.new("ImageLabel")
		inner.Name                 = "Inner"
		inner.BackgroundTransparency = 1
		inner.Size                 = UDim2.new(0, 75, 0, 75) -- Will be UDim2.fromScale(1,1) in trackESP to fill parent
		inner.Image                = "http://www.roblox.com/asset/?id=11591014163"
		inner.AnchorPoint          = Vector2.new(0.5, 0.5)
		inner.Position             = UDim2.fromScale(0.5, 0.5)
		inner.Parent               = gui

		local outer = Instance.new("ImageLabel")
		outer.Name                 = "Outer"
		outer.BackgroundTransparency = 1
		outer.Size                 = UDim2.new(0, 75, 0, 75) -- Will be UDim2.fromScale(1,1) in trackESP
		outer.Image                = "http://www.roblox.com/asset/?id=9766083125"
		outer.ImageColor3          = Color3.fromRGB(246, 255, 252)
		outer.AnchorPoint          = Vector2.new(0.5, 0.5)
		outer.Position             = UDim2.fromScale(0.5, 0.5)
		outer.Parent               = gui

		return gui
	end

	-- 2) Info GUI (UPDATED to include new labels)
	local function createInfoGui(rootPart)
		local infoBillboard = Instance.new("BillboardGui")
		infoBillboard.Name = "InfoBillboard"
		infoBillboard.Adornee = rootPart
		infoBillboard.AlwaysOnTop = true
		infoBillboard.Size = UDim2.new(0, INFO_BASE_WIDTH_PIXELS, 0, INFO_BASE_HEIGHT_PIXELS) -- Initial size
		infoBillboard.StudsOffset = Vector3.new(0, INFO_STUDS_OFFSET_Y_Z.X, INFO_STUDS_OFFSET_Y_Z.Y)
		infoBillboard.Parent = rootPart
		infoBillboard.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		infoBillboard.MaxDistance = 400

		local infoFrame = Instance.new("Frame")
		infoFrame.Name = "InfoFrame"
		infoFrame.Size = UDim2.fromScale(1, 1)
		infoFrame.AnchorPoint = Vector2.new(0.5, 0.5)
		infoFrame.Position = UDim2.fromScale(0.5, 0.5)
		infoFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
		infoFrame.BackgroundTransparency = 0.3
		infoFrame.BorderSizePixel = 1
		infoFrame.BorderColor3 = Color3.fromRGB(34, 138, 143)
		infoFrame.Parent = infoBillboard

		local corner = Instance.new("UICorner")
		corner.CornerRadius = UDim.new(0, 6)
		corner.Parent = infoFrame

		local padding = Instance.new("UIPadding")
		padding.PaddingTop = UDim.new(0, 5)
		padding.PaddingBottom = UDim.new(0, 5)
		padding.PaddingLeft = UDim.new(0, 8)
		padding.PaddingRight = UDim.new(0, 8)
		padding.Parent = infoFrame

		local listLayout = Instance.new("UIListLayout")
		listLayout.FillDirection = Enum.FillDirection.Vertical
		listLayout.SortOrder = Enum.SortOrder.LayoutOrder
		listLayout.VerticalAlignment = Enum.VerticalAlignment.Center
		listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
		listLayout.Padding = UDim.new(0, 2) -- Space between labels
		listLayout.Parent = infoFrame

		local healthLabel = Instance.new("TextLabel")
		healthLabel.Name = "HealthLabel"
		healthLabel.Size = UDim2.new(1, 0, 0, INFO_BASE_TEXT_SIZE + 4)
		healthLabel.Text = "Health: N/A"
		healthLabel.Font = Enum.Font.SourceSans
		healthLabel.TextSize = INFO_BASE_TEXT_SIZE
		healthLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
		healthLabel.TextXAlignment = Enum.TextXAlignment.Left
		healthLabel.TextYAlignment = Enum.TextYAlignment.Center
		healthLabel.BackgroundTransparency = 1
		healthLabel.LayoutOrder = 1
		healthLabel.Parent = infoFrame

		local speedLabel = Instance.new("TextLabel")
		speedLabel.Name = "SpeedLabel"
		speedLabel.Size = UDim2.new(1, 0, 0, INFO_BASE_TEXT_SIZE + 4)
		speedLabel.Text = "Speed: N/A"
		speedLabel.Font = Enum.Font.SourceSans
		speedLabel.TextSize = INFO_BASE_TEXT_SIZE
		speedLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
		speedLabel.TextXAlignment = Enum.TextXAlignment.Left
		speedLabel.TextYAlignment = Enum.TextYAlignment.Center
		speedLabel.BackgroundTransparency = 1
		speedLabel.LayoutOrder = 2
		speedLabel.Parent = infoFrame

		-- New Label: Velocity
		local velocityLabel = Instance.new("TextLabel")
		velocityLabel.Name = "VelocityLabel"
		velocityLabel.Size = UDim2.new(1, 0, 0, INFO_BASE_TEXT_SIZE + 4)
		velocityLabel.Text = "Velocity: N/A"
		velocityLabel.Font = Enum.Font.SourceSans
		velocityLabel.TextSize = INFO_BASE_TEXT_SIZE
		velocityLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
		velocityLabel.TextXAlignment = Enum.TextXAlignment.Left
		velocityLabel.TextYAlignment = Enum.TextYAlignment.Center
		velocityLabel.BackgroundTransparency = 1
		velocityLabel.LayoutOrder = 3
		velocityLabel.Parent = infoFrame

		-- New Label: JumpPower
		local jumpPowerLabel = Instance.new("TextLabel")
		jumpPowerLabel.Name = "JumpPowerLabel"
		jumpPowerLabel.Size = UDim2.new(1, 0, 0, INFO_BASE_TEXT_SIZE + 4)
		jumpPowerLabel.Text = "JumpPower: N/A"
		jumpPowerLabel.Font = Enum.Font.SourceSans
		jumpPowerLabel.TextSize = INFO_BASE_TEXT_SIZE
		jumpPowerLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
		jumpPowerLabel.TextXAlignment = Enum.TextXAlignment.Left
		jumpPowerLabel.TextYAlignment = Enum.TextYAlignment.Center
		jumpPowerLabel.BackgroundTransparency = 1
		jumpPowerLabel.LayoutOrder = 4
		jumpPowerLabel.Parent = infoFrame

		-- New Label: Vulnerable State
		local vulnerableLabel = Instance.new("TextLabel")
		vulnerableLabel.Name = "VulnerableLabel"
		vulnerableLabel.Size = UDim2.new(1, 0, 0, INFO_BASE_TEXT_SIZE + 4)
		vulnerableLabel.Text = "Vulnerable: N/A" -- Placeholder
		vulnerableLabel.Font = Enum.Font.SourceSans
		vulnerableLabel.TextSize = INFO_BASE_TEXT_SIZE
		vulnerableLabel.TextColor3 = Color3.fromRGB(230, 230, 230) -- Default color, can change
		vulnerableLabel.TextXAlignment = Enum.TextXAlignment.Left
		vulnerableLabel.TextYAlignment = Enum.TextYAlignment.Center
		vulnerableLabel.BackgroundTransparency = 1
		vulnerableLabel.LayoutOrder = 5
		vulnerableLabel.Parent = infoFrame

		return infoBillboard, infoFrame, healthLabel, speedLabel, velocityLabel, jumpPowerLabel, vulnerableLabel
	end

	local function trackESP(gui, targetPart)
		gui.Adornee = targetPart

		local conn
		conn = RunService.RenderStepped:Connect(function()
			if not (targetPart and targetPart.Parent) then
				conn:Disconnect()
				gui:Destroy()
				return
			end

			gui.Inner.Rotation += 1
			gui.Outer.Rotation -= 1

			-- 1) Clamp the raw distance
			local rawDist = (Camera.CFrame.Position - targetPart.Position).Magnitude
			local dist    = math.clamp(rawDist, ESP_MIN_DIST, ESP_MAX_DIST)

			-- 2) Compute a perfectly [0,1] alpha
			local alpha = (dist - ESP_MIN_DIST) / (ESP_MAX_DIST - ESP_MIN_DIST)

			-- 3) Compute and re-clamp the scale
			local scaleFactor = ESP_MIN_SCALE + (ESP_MAX_SCALE - ESP_MIN_SCALE) * alpha
			scaleFactor = math.clamp(scaleFactor, ESP_MIN_SCALE, ESP_MAX_SCALE)

			-- 4a) If you want pure relative scaling:
			gui.Size = UDim2.fromScale(scaleFactor, scaleFactor)

			if gui.Inner then gui.Inner.Size = UDim2.fromScale(1,1) end
			if gui.Outer then gui.Outer.Size = UDim2.fromScale(1,1) end
		end)
	end
	local LOOK_AT_THRESHOLD = 0.3

	local function trackInfoGui(infoBillboard, infoFrame, healthLabel, speedLabel,
		velocityLabel, jumpPowerLabel, vulnerableLabel,
		espGui, rootPart, humanoid)
		-- your HumanoidRootPart (the one being “spotted”)
		local hrp = game.Players.LocalPlayer.Character and
			game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
		if not hrp then return end

		local conn
		conn = RunService.RenderStepped:Connect(function()
			-- teardown if anything goes missing
			if not rootPart or not rootPart.Parent
				or not humanoid or not humanoid.Parent
				or not espGui or not espGui.Parent
				or not Camera
				or not hrp or not hrp.Parent then

				conn:Disconnect()
				infoBillboard:Destroy()
				return
			end

			local cameraPos = Camera.CFrame.Position
			local targetPos = rootPart.Position
			if not cameraPos or not targetPos then return end

			-- distance & scaling (unchanged from before)
			local dist = (cameraPos - targetPos).Magnitude
			local alpha = math.clamp((dist - INFO_MIN_DIST) /
				(INFO_MAX_DIST - INFO_MIN_DIST), 0, 1)
			local current_scale_multiplier =
				INFO_MIN_SCALE + (INFO_MAX_SCALE - INFO_MIN_SCALE) * alpha

			local scaledInfoWidth  = INFO_BASE_WIDTH_PIXELS  * current_scale_multiplier
			local scaledInfoHeight = INFO_BASE_HEIGHT_PIXELS * current_scale_multiplier
			infoBillboard.Size    = UDim2.new(0, scaledInfoWidth, 0, scaledInfoHeight)

			local scaled_text_size   = math.floor(INFO_BASE_TEXT_SIZE * current_scale_multiplier)
			local label_item_height  = scaled_text_size + 4
			for _, lbl in ipairs({healthLabel, speedLabel, velocityLabel,
				jumpPowerLabel, vulnerableLabel}) do
				lbl.TextSize = scaled_text_size
				lbl.Size     = UDim2.new(1, 0, 0, label_item_height)
			end

			-- update numeric info (unchanged)
			healthLabel.Text    = string.format("Health: %.0f/%.0f",
				humanoid.Health, humanoid.MaxHealth)
			speedLabel.Text     = string.format("Speed: %.0f", humanoid.WalkSpeed)
			if rootPart.AssemblyLinearVelocity then
				velocityLabel.Text = string.format("Velocity: %.1f",
					rootPart.AssemblyLinearVelocity.Magnitude)
			else
				velocityLabel.Text = "Velocity: N/A"
			end
			jumpPowerLabel.Text = string.format("JumpPower: %.0f",
				humanoid.JumpPower)

			-- ——— NEW: Looking + LOS check ———
			local lookVec  = rootPart.CFrame.LookVector
			local toHrp    = (hrp.Position - targetPos).Unit
			local dot      = lookVec:Dot(toHrp)
			local isLookingDot = (dot >= LOOK_AT_THRESHOLD)

			-- Raycast to see if there's a clear line-of-sight
			local rayParams = RaycastParams.new()
			rayParams.FilterType             = Enum.RaycastFilterType.Blacklist
			-- ignore ONLY the other player's own character
			rayParams.FilterDescendantsInstances = { rootPart.Parent }

			local rayDir = (hrp.Position - targetPos)
			local rayRes = workspace:Raycast(targetPos, rayDir, rayParams)

			-- if ray hits something
			local hasLOS = false
			if rayRes then
				-- if the first thing hit is _your_ character, LOS is clear
				if rayRes.Instance:IsDescendantOf(game.Players.LocalPlayer.Character) then
					hasLOS = true
				end
			end

			-- only if both dot‐check and LOS pass do we say “not vulnerable”
			local vulnerable = not (isLookingDot and hasLOS)

			-- color it red when vulnerable, green when safe
			if vulnerable then
				vulnerableLabel.TextColor3 = Color3.new(0.305882, 1, 0.294118)
			else
				vulnerableLabel.TextColor3 = Color3.new(1, 0, 0.0156863)
			end
			vulnerableLabel.Text = string.format("Vulnerable: %s", tostring(vulnerable))

			-- ——— Billboard positioning (unchanged) ———
			local viewport_height     = Camera.ViewportSize.Y
			local fov_radians         = math.rad(Camera.FieldOfView)
			if fov_radians == 0 or viewport_height == 0 then return end

			local focal_length_pixels = (viewport_height/2) / math.tan(fov_radians/2)
			if focal_length_pixels == 0 then return end

			local dist_for_offset_calc = math.clamp(dist, INFO_MIN_DIST, INFO_MAX_DIST)
			local esp_stud_width       = espGui.Size.X.Scale
			local info_stud_width      = scaledInfoWidth * dist_for_offset_calc / focal_length_pixels

			local esp_center_x_studs   = espGui.StudsOffset.X
			local new_info_offset_x    =
				esp_center_x_studs + (esp_stud_width/2) + DESIRED_STUD_GAP + (info_stud_width/2)

			infoBillboard.StudsOffset = Vector3.new(
				new_info_offset_x,
				INFO_STUDS_OFFSET_Y_Z.X,
				INFO_STUDS_OFFSET_Y_Z.Y
			)
		end)
	end

	-- MAIN SETUP PER CHARACTER
	local function setupCharacter(player)
		if player == Players.LocalPlayer then return end

		local char = player.Character
		if not char then return end

		local rootPart = char:FindFirstChild("HumanoidRootPart")
		if not rootPart then return end

		local hum = char:FindFirstChildOfClass("Humanoid")
		if not hum then return end

		-- ESP
		local espGui = createESPGui()
		espGui.Parent = rootPart -- Parent before tracking to ensure Adornee is valid in BillboardGui context
		trackESP(espGui, rootPart)

		-- Info GUI (UPDATED: receive and pass new labels)
		local infoBillboard, infoFrame, healthLabel, speedLabel, velocityLabel, jumpPowerLabel, vulnerableLabel = createInfoGui(rootPart)
		if infoBillboard then
			trackInfoGui(infoBillboard, infoFrame, healthLabel, speedLabel, velocityLabel, jumpPowerLabel, vulnerableLabel, espGui, rootPart, hum)
		end

		-- Clean up on death
		hum.Died:Connect(function()
			if espGui        then espGui:Destroy()        end
			if infoBillboard then infoBillboard:Destroy() end
		end)
	end

	-- PLAYER HANDLERS
	local function onPlayerAdded(player)
		player.CharacterAdded:Connect(function(character)
			-- Wait for essential parts to ensure stability, especially HumanoidRootPart
			local rootPart = character:WaitForChild("HumanoidRootPart", 10)
			local hum = character:WaitForChild("Humanoid", 10)
			if rootPart and hum then
				setupCharacter(player)
			else
				warn("InfoGUI: Could not find HRP or Humanoid for player: " .. player.Name .. " on CharacterAdded after waiting.")
			end
		end)

		if player.Character then
			task.wait() -- Allow character parts to replicate if joining mid-game
			local currentCharacter = player.Character
			local rootPart = currentCharacter:FindFirstChild("HumanoidRootPart")
			local hum = currentCharacter:FindFirstChild("Humanoid")
			if rootPart and hum then
				setupCharacter(player)
				-- else
				-- CharacterAdded will handle it if parts load later.
				-- warn("InfoGUI: Could not find HRP or Humanoid for player: " .. player.Name .. " on initial check (Character already exists).")
			end
		end
	end

	-- Init existing players
	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= Players.LocalPlayer then -- Ensure not setting up for local player if that's the design
			onPlayerAdded(plr)
		end
	end

	-- Listen for new ones
	Players.PlayerAdded:Connect(function(player)
		if player ~= Players.LocalPlayer then -- Ensure not setting up for local player
			onPlayerAdded(player)
		end
	end)
end
task.spawn(espGUI)
